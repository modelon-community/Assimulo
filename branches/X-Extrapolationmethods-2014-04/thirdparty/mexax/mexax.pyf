!    -*- f90 -*-
! Note: the context of this file is case sensitive.

python module mexx21__user__routines 
    interface mexx21_user_interface 
        subroutine solout(np,nv,nu,nl,t,p,v,u,a,rlam,infos,irtrn) ! in :mexax:mexax.f:mexx21:unknown_interface
            integer, intent(in) :: np
            integer , intent(in):: nv
            integer, intent(in) :: nu
            integer , intent(in):: nl
            double precision, intent(in,out) :: t
            double precision dimension(npdim) , intent(in,out):: p
            double precision dimension(nvdim) , intent(in,out):: v
            double precision dimension(nudim) , intent(in,out):: u
            double precision dimension(nvdim),depend(nvdim), intent(in,out) :: a
            double precision dimension(nldim), intent(in,out) :: rlam
            integer dimension(50) :: infos
            integer :: irtrn
        end subroutine solout
    end interface mexx21_user_interface
end python module mexx21__user__routines
python module mxprob__user__routines 
    interface mxprob_user_interface 
        subroutine fprob1(np,nv,nl,ng,nu,ldg,t,p,v,u,rlam,am,gp,f,pdot,udot,g,gi,fl,qflag,ifail) ! in :mexax:mexax.f:mxprob:unknown_interface
            integer, intent(in)  :: np
            integer , intent(in) :: nv
            integer , intent(in) :: nl
            integer, intent(in)  :: ng
            integer , intent(in) :: nu
            integer, optional,check(shape(gp,0)==ldg),depend(gp) , intent(in):: ldg=shape(gp,0)
            double precision , intent(in) :: t
            double precision dimension(npdim), intent(in)  :: p
            double precision dimension(nvdim) , intent(in) :: v
            double precision dimension(nudim) , intent(in) :: u
            double precision dimension(nldim), intent(in)  :: rlam
            double precision dimension(lda,mda), intent(out)  :: am
            double precision dimension(ldg,mdg) , intent(out) :: gp
            double precision dimension(nvdim),depend(nvdim), intent(out)  :: f
            double precision dimension(npdim),depend(npdim) , intent(out) :: pdot
            double precision dimension(nudim),depend(nudim), intent(out)  :: udot
            double precision dimension(ngdim), intent(out)  :: g
            double precision dimension(nldim),depend(nldim), intent(out)  :: gi
            double precision dimension(ldf,mdf), intent(out)  :: fl
            logical dimension(9) , intent(out) :: qflag
            integer , intent(out) :: ifail
        end subroutine fprob1
        subroutine fprob2(np,nv,nl,ng,nu,ldg,t,p,v,u,rlam,am,gp,f,pdot,udot,g,gi,fl,qflag,e_mxjob_4_err,e_mxjob_5_err,ifail) ! in :mexax:mexax.f:mxprob:unknown_interface
            integer , intent(in):: np
            integer , intent(in):: nv
            integer, intent(in) :: nl
            integer , intent(in):: ng
            integer, intent(in) :: nu
            integer, optional,check(shape(gp,0)==ldg),depend(gp), intent(in) :: ldg=shape(gp,0)
            double precision, intent(in) :: t
            double precision dimension(npdim), intent(in) :: p
            double precision dimension(nvdim), intent(in) :: v
            double precision dimension(nudim), intent(in) :: u
            double precision dimension(nldim) , intent(in):: rlam
            double precision dimension(lda,mda) , intent(out):: am
            double precision dimension(ldg,mdg) , intent(out):: gp
            double precision dimension(nvdim),depend(nvdim) , intent(out):: f
            double precision dimension(npdim),depend(npdim), intent(out) :: pdot
            double precision dimension(nudim),depend(nudim), intent(out) :: udot
            double precision dimension(ngdim) , intent(out):: g
            double precision dimension(nldim),depend(nldim), intent(out) :: gi
            double precision dimension(ldf,mdf), intent(out) :: fl
            logical dimension(9) , intent(out):: qflag
            integer , intent(out):: e_mxjob_4_err
            integer , intent(out):: e_mxjob_5_err
            integer , intent(out):: ifail
        end subroutine fprob2
        subroutine fprob3(np,nv,nl,ng,nu,ldg,t,p,v,u,rlam,am,gp,f,pdot,udot,g,gi,fl,qflag,e_mxjob_4_err,e_mxjob_5_err,e_mxjob_7_err,e_mxjob_8_err,e_iwkl_jirg_err,e_iwkl_jjcg_err,e_mxjob_101_err,e_mxjob_102_err,e_iwkl_jirf_err,e_iwkl_jjcf_err,e_mxjob_104_err,e_mxjob_105_err,ifail) ! in :mexax:mexax.f:mxprob:unknown_interface
            integer , intent(in):: np
            integer, intent(in) :: nv
            integer , intent(in):: nl
            integer , intent(in):: ng
            integer, intent(in) :: nu
            integer, optional,check(shape(gp,0)==ldg),depend(gp), intent(in) :: ldg=shape(gp,0)
            double precision , intent(in):: t
            double precision dimension(npdim), intent(in) :: p
            double precision dimension(nvdim) , intent(in):: v
            double precision dimension(nudim), intent(in) :: u
            double precision dimension(nldim), intent(in) :: rlam
            double precision dimension(lda,mda), intent(out) :: am
            double precision dimension(ldg,mdg), intent(out) :: gp
            double precision dimension(nvdim),depend(nvdim) , intent(out):: f
            double precision dimension(npdim),depend(npdim) , intent(out):: pdot
            double precision dimension(nudim),depend(nudim) , intent(out):: udot
            double precision dimension(ngdim) , intent(out):: g
            double precision dimension(nldim),depend(nldim), intent(out) :: gi
            double precision dimension(ldf,mdf), intent(out) :: fl
            logical dimension(9), intent(out) :: qflag
            integer, intent(out) :: e_mxjob_4_err
            integer , intent(out):: e_mxjob_5_err
            integer, intent(out) :: e_mxjob_7_err
            integer , intent(out):: e_mxjob_8_err
            integer, intent(out) :: e_iwkl_jirg_err
            integer, intent(out) :: e_iwkl_jjcg_err
            integer, intent(out) :: e_mxjob_101_err
            integer, intent(out) :: e_mxjob_102_err
            integer, intent(out) :: e_iwkl_jirf_err
            integer , intent(out):: e_iwkl_jjcf_err
            integer, intent(out) :: e_mxjob_104_err
            integer, intent(out) :: e_mxjob_105_err
            integer, intent(out) :: ifail
        end subroutine fprob3
    end interface mxprob_user_interface
end python module mxprob__user__routines
python module mxdout__user__routines 
    interface mxdout_user_interface 
        subroutine denout(ndph,ndvh,nduh,ndah,ndlh,x,e_yip_idp_err,e_yip_idv_err,e_yip_idu_err,e_yip_ida_err,e_yip_idl_err,indp,indv,indu,inda,indl,info,irtrn) ! in :mexax:mexax.f:mxdout:unknown_interface
            integer :: ndph
            integer :: ndvh
            integer :: nduh
            integer :: ndah
            integer :: ndlh
            double precision :: x
            double precision :: e_yip_idp_err
            double precision :: e_yip_idv_err
            double precision :: e_yip_idu_err
            double precision :: e_yip_ida_err
            double precision :: e_yip_idl_err
            integer dimension(*) :: indp
            integer dimension(*) :: indv
            integer dimension(*) :: indu
            integer dimension(*) :: inda
            integer dimension(*) :: indl
            integer dimension(50) :: info
            integer :: irtrn
        end subroutine denout
    end interface mxdout_user_interface
end python module mxdout__user__routines
python module mxrtsc__user__routines 
    interface mxrtsc_user_interface 
        subroutine gswit(np,nv,nl,nu,t,p,v,u,a,rlam,nswif,gval1) ! in :mexax:mexax.f:mxrtsc:unknown_interface
            logical :: np
            logical :: nv
            logical :: nl
            logical :: nu
            double precision :: t
            double precision dimension((npdim)) :: p
            double precision dimension((nvdim)) :: v
            double precision dimension((nudim)) :: u
            double precision dimension((nvdim)) :: a
            double precision dimension((nldim)) :: rlam
            logical :: nswif
            double precision dimension(*) :: gval1
        end subroutine gswit
    end interface mxrtsc_user_interface
end python module mxrtsc__user__routines
python module mxrtfd__user__routines 
    interface mxrtfd_user_interface 
        subroutine gswit(np,nv,nl,nu,trr,e_yip_ipp_err,e_yip_ipv_err,e_yip_ipu_err,e_yip_ipa_err,e_yip_ipl_err,nswif,gvalr) ! in :mexax:mexax.f:mxrtfd:unknown_interface
            integer :: np
            integer :: nv
            integer :: nl
            integer :: nu
            double precision :: trr
            double precision :: e_yip_ipp_err
            double precision :: e_yip_ipv_err
            double precision :: e_yip_ipu_err
            double precision :: e_yip_ipa_err
            double precision :: e_yip_ipl_err
            logical :: nswif
            double precision dimension(*) :: gvalr
        end subroutine gswit
    end interface mxrtfd_user_interface
end python module mxrtfd__user__routines
python module mexax ! in 
    interface  ! in :mexax
        subroutine dchdc(a,lda,p,work,jpvt,job,info) ! in :mexax:linalg_mexax.f
            double precision dimension(lda,*) :: a
            integer, optional,check(shape(a,0)==lda),depend(a) :: lda=shape(a,0)
            integer :: p
            double precision dimension(*) :: work
            integer dimension(*) :: jpvt
            integer :: job
            integer :: info
        end subroutine dchdc
        subroutine dqrdc(x,ldx,n,p,qraux,jpvt,work,job) ! in :mexax:linalg_mexax.f
            double precision dimension(ldx,*) :: x
            integer, optional,check(shape(x,0)==ldx),depend(x) :: ldx=shape(x,0)
            integer :: n
            integer :: p
            double precision dimension(*) :: qraux
            integer dimension(*) :: jpvt
            double precision dimension(*) :: work
            integer :: job
        end subroutine dqrdc
        subroutine dscal(n,da,dx,incx) ! in :mexax:linalg_mexax.f
            integer :: n
            double precision :: da
            double precision dimension(*) :: dx
            integer :: incx
        end subroutine dscal
        function dnrm2(n,dx,incx) ! in :mexax:linalg_mexax.f
            integer :: n
            double precision dimension(*) :: dx
            integer :: incx
            double precision :: dnrm2
        end function dnrm2
        function ddot(n,dx,incx,dy,incy) ! in :mexax:linalg_mexax.f
            integer :: n
            double precision dimension(*) :: dx
            integer :: incx
            double precision dimension(*) :: dy
            integer :: incy
            double precision :: ddot
        end function ddot
        subroutine dswap(n,dx,incx,dy,incy) ! in :mexax:linalg_mexax.f
            integer :: n
            double precision dimension(*) :: dx
            integer :: incx
            double precision dimension(*) :: dy
            integer :: incy
        end subroutine dswap
        subroutine daxpy(n,da,dx,incx,dy,incy) ! in :mexax:linalg_mexax.f
            integer :: n
            double precision :: da
            double precision dimension(*) :: dx
            integer :: incx
            double precision dimension(*) :: dy
            integer :: incy
        end subroutine daxpy
        subroutine dgefa(a,lda,n,ipvt,info) ! in :mexax:linalg_mexax.f
            double precision dimension(lda,*) :: a
            integer, optional,check(shape(a,0)==lda),depend(a) :: lda=shape(a,0)
            integer :: n
            integer dimension(*) :: ipvt
            integer :: info
        end subroutine dgefa
        subroutine dgesl(a,lda,n,ipvt,b,job) ! in :mexax:linalg_mexax.f
            double precision dimension(lda,*) :: a
            integer, optional,check(shape(a,0)==lda),depend(a) :: lda=shape(a,0)
            integer :: n
            integer dimension(*) :: ipvt
            double precision dimension(*) :: b
            integer :: job
        end subroutine dgesl
        function idamax(n,dx,incx) ! in :mexax:linalg_mexax.f
            integer :: n
            double precision dimension(*) :: dx
            integer :: incx
            integer :: idamax
        end function idamax
        subroutine dtrsl(t,ldt,n,b,job,info) ! in :mexax:linalg_mexax.f
            double precision dimension(ldt,*) :: t
            integer, optional,check(shape(t,0)==ldt),depend(t) :: ldt=shape(t,0)
            integer :: n
            double precision dimension(*) :: b
            integer :: job
            integer :: info
        end subroutine dtrsl
        subroutine dsifa(a,lda,n,kpvt,info) ! in :mexax:linalg_mexax.f
            double precision dimension(lda,*) :: a
            integer, optional,check(shape(a,0)==lda),depend(a) :: lda=shape(a,0)
            integer :: n
            integer dimension(*) :: kpvt
            integer :: info
        end subroutine dsifa
        subroutine dsisl(a,lda,n,kpvt,b) ! in :mexax:linalg_mexax.f
            double precision dimension(lda,*) :: a
            integer, optional,check(shape(a,0)==lda),depend(a) :: lda=shape(a,0)
            integer :: n
            integer dimension(*) :: kpvt
            double precision dimension(*) :: b
        end subroutine dsisl
        subroutine ma28ad(n,nz,a,licn,irn,lirn,icn,u,ikeep,iw,w,iflag) ! in :mexax:linalg_mexax.f
            integer, optional,check(shape(ikeep,0)==n),depend(ikeep) :: n=shape(ikeep,0)
            integer :: nz
            double precision dimension(licn) :: a
            integer, optional,check(len(a)>=licn),depend(a) :: licn=len(a)
            integer dimension(lirn) :: irn
            integer, optional,check(len(irn)>=lirn),depend(irn) :: lirn=len(irn)
            integer dimension(licn),depend(licn) :: icn
            double precision :: u
            integer dimension(n,5) :: ikeep
            integer dimension(n,8),depend(n) :: iw
            double precision dimension(n),depend(n) :: w
            integer :: iflag
            double precision :: tol
            double precision :: themax
            double precision :: big
            double precision :: dxmax
            double precision :: errmax
            double precision :: dres
            double precision :: cgce
            integer :: ndrop
            integer :: maxit
            integer :: noiter
            integer :: nsrch
            integer :: istart
            logical :: lbig
            integer :: lp
            integer :: mp
            logical :: lblock
            logical :: grow
            double precision :: eps
            double precision :: rmin
            double precision :: resid
            integer :: irncp
            integer :: icncp
            integer :: minirn
            integer :: minicn
            integer :: irank
            logical :: abort1
            logical :: abort2
            integer :: mlp
            integer :: numnz
            integer :: num
            integer :: large
            logical :: abort
            integer dimension(10) :: lpiv
            integer dimension(10) :: lnpiv
            integer :: mapiv
            integer :: manpiv
            integer :: iavpiv
            integer :: ianpiv
            integer :: kountl
            integer dimension(2) :: idisp
            double precision :: tol1
            double precision :: big1
            integer :: ndrop1
            integer :: nsrch1
            logical :: lbig1
            integer :: nlp
            logical :: aborta
            logical :: abortb
            logical :: abort3
            integer :: mirncp
            integer :: micncp
            integer :: mirank
            integer :: mirn
            integer :: micn
            common /ma28hd/ tol,themax,big,dxmax,errmax,dres,cgce,ndrop,maxit,noiter,nsrch,istart,lbig
            common /ma28ed/ lp,mp,lblock,grow
            common /ma28fd/ eps,rmin,resid,irncp,icncp,minirn,minicn,irank,abort1,abort2
            common /mc23bd/ mlp,numnz,num,large,abort
            common /lpivot/ lpiv,lnpiv,mapiv,manpiv,iavpiv,ianpiv,kountl
            common /ma28gd/ idisp
            common /ma30id/ tol1,big1,ndrop1,nsrch1,lbig1
            common /ma30ed/ nlp,aborta,abortb,abort3
            common /ma30fd/ mirncp,micncp,mirank,mirn,micn
        end subroutine ma28ad
        subroutine ma28bd(n,nz,a,licn,ivect,jvect,icn,ikeep,iw,w,iflag) ! in :mexax:linalg_mexax.f
            integer, optional,check(shape(ikeep,0)==n),depend(ikeep) :: n=shape(ikeep,0)
            integer, optional,check(len(ivect)>=nz),depend(ivect) :: nz=len(ivect)
            double precision dimension(licn) :: a
            integer, optional,check(len(a)>=licn),depend(a) :: licn=len(a)
            integer dimension(nz) :: ivect
            integer dimension(nz),depend(nz) :: jvect
            integer dimension(licn),depend(licn) :: icn
            integer dimension(n,5) :: ikeep
            integer dimension(n,5),depend(n) :: iw
            double precision dimension(n),depend(n) :: w
            integer :: iflag
            double precision :: tol
            double precision :: themax
            double precision :: big
            double precision :: dxmax
            double precision :: errmax
            double precision :: dres
            double precision :: cgce
            integer :: ndrop
            integer :: maxit
            integer :: noiter
            integer :: nsrch
            integer :: istart
            logical :: lbig
            integer :: mp
            integer :: lp
            logical :: lblock
            logical :: grow
            double precision :: eps
            double precision :: rmin
            double precision :: resid
            integer :: irncp
            integer :: icncp
            integer :: minirn
            integer :: minicn
            integer :: irank
            logical :: abort1
            logical :: abort2
            integer dimension(2) :: idisp
            double precision :: tol1
            double precision :: big1
            integer :: ndrop1
            integer :: nsrch1
            logical :: lbig1
            integer :: nlp
            logical :: aborta
            logical :: abortb
            logical :: abort3
            double precision :: meps
            double precision :: mrmin
            common /ma28hd/ tol,themax,big,dxmax,errmax,dres,cgce,ndrop,maxit,noiter,nsrch,istart,lbig
            common /ma28ed/ mp,lp,lblock,grow
            common /ma28fd/ eps,rmin,resid,irncp,icncp,minirn,minicn,irank,abort1,abort2
            common /ma28gd/ idisp
            common /ma30id/ tol1,big1,ndrop1,nsrch1,lbig1
            common /ma30ed/ nlp,aborta,abortb,abort3
            common /ma30gd/ meps,mrmin
        end subroutine ma28bd
        subroutine ma28cd(n,a,licn,icn,ikeep,rhs,w,mtype) ! in :mexax:linalg_mexax.f
            integer, optional,check(shape(ikeep,0)==n),depend(ikeep) :: n=shape(ikeep,0)
            double precision dimension(licn) :: a
            integer, optional,check(len(a)>=licn),depend(a) :: licn=len(a)
            integer dimension(licn),depend(licn) :: icn
            integer dimension(n,5) :: ikeep
            double precision dimension(n),depend(n) :: rhs
            double precision dimension(n),depend(n) :: w
            integer :: mtype
            double precision :: eps
            double precision :: rmin
            double precision :: resid
            integer :: irncp
            integer :: icncp
            integer :: minirn
            integer :: minicn
            integer :: irank
            logical :: abort1
            logical :: abort2
            double precision :: mresid
            integer dimension(2) :: idisp
            common /ma28fd/ eps,rmin,resid,irncp,icncp,minirn,minicn,irank,abort1,abort2
            common /ma30hd/ mresid
            common /ma28gd/ idisp
        end subroutine ma28cd
        subroutine ma28dd(n,a,licn,ivect,jvect,nz,icn,lenr,lenrl,lenoff,ip,iq,iw1,iw,w1,iflag) ! in :mexax:linalg_mexax.f
            integer, optional,check(len(lenr)>=n),depend(lenr) :: n=len(lenr)
            double precision dimension(licn) :: a
            integer, optional,check(len(a)>=licn),depend(a) :: licn=len(a)
            integer dimension(nz) :: ivect
            integer dimension(nz),depend(nz) :: jvect
            integer, optional,check(len(ivect)>=nz),depend(ivect) :: nz=len(ivect)
            integer dimension(licn),depend(licn) :: icn
            integer dimension(n) :: lenr
            integer dimension(n),depend(n) :: lenrl
            integer dimension(n),depend(n) :: lenoff
            integer dimension(n),depend(n) :: ip
            integer dimension(n),depend(n) :: iq
            integer dimension(n,3),depend(n) :: iw1
            integer dimension(n,2),depend(n) :: iw
            double precision :: w1
            integer :: iflag
            integer :: lp
            integer :: mp
            logical :: lblock
            logical :: grow
            integer dimension(2) :: idisp
            common /ma28ed/ lp,mp,lblock,grow
            common /ma28gd/ idisp
        end subroutine ma28dd
        subroutine ma30ad(nn,icn,a,licn,lenr,lenrl,idisp,ip,iq,irn,lirn,lenc,ifirst,lastr,nextr,lastc,nextc,iptr,ipc,u,iflag) ! in :mexax:linalg_mexax.f
            integer, optional,check(len(lenr)>=nn),depend(lenr) :: nn=len(lenr)
            integer dimension(licn) :: icn
            double precision dimension(licn),depend(licn) :: a
            integer, optional,check(len(icn)>=licn),depend(icn) :: licn=len(icn)
            integer dimension(nn) :: lenr
            integer dimension(nn),depend(nn) :: lenrl
            integer dimension(2) :: idisp
            integer dimension(nn),depend(nn) :: ip
            integer dimension(nn),depend(nn) :: iq
            integer dimension(lirn) :: irn
            integer, optional,check(len(irn)>=lirn),depend(irn) :: lirn=len(irn)
            integer dimension(nn),depend(nn) :: lenc
            integer dimension(nn),depend(nn) :: ifirst
            integer dimension(nn),depend(nn) :: lastr
            integer dimension(nn),depend(nn) :: nextr
            integer dimension(nn),depend(nn) :: lastc
            integer dimension(nn),depend(nn) :: nextc
            integer dimension(nn),depend(nn) :: iptr
            integer dimension(nn),depend(nn) :: ipc
            double precision :: u
            integer :: iflag
            double precision :: tol
            double precision :: big
            integer :: ndrop
            integer :: nsrch
            logical :: lbig
            integer dimension(10) :: lpiv
            integer dimension(10) :: lnpiv
            integer :: mapiv
            integer :: manpiv
            integer :: iavpiv
            integer :: ianpiv
            integer :: kountl
            integer :: lp
            logical :: abort1
            logical :: abort2
            logical :: abort3
            integer :: irncp
            integer :: icncp
            integer :: irank
            integer :: minirn
            integer :: minicn
            common /ma30id/ tol,big,ndrop,nsrch,lbig
            common /lpivot/ lpiv,lnpiv,mapiv,manpiv,iavpiv,ianpiv,kountl
            common /ma30ed/ lp,abort1,abort2,abort3
            common /ma30fd/ irncp,icncp,irank,minirn,minicn
        end subroutine ma30ad
        subroutine ma30bd(n,icn,a,licn,lenr,lenrl,idisp,ip,iq,w,iw,iflag) ! in :mexax:linalg_mexax.f
            integer, optional,check(len(lenr)>=n),depend(lenr) :: n=len(lenr)
            integer dimension(licn) :: icn
            double precision dimension(licn),depend(licn) :: a
            integer, optional,check(len(icn)>=licn),depend(icn) :: licn=len(icn)
            integer dimension(n) :: lenr
            integer dimension(n),depend(n) :: lenrl
            integer dimension(2) :: idisp
            integer dimension(n),depend(n) :: ip
            integer dimension(n),depend(n) :: iq
            double precision dimension(n),depend(n) :: w
            integer dimension(n),depend(n) :: iw
            integer :: iflag
            double precision :: eps
            double precision :: rmin
            double precision :: tol
            double precision :: big
            integer :: ndrop
            integer :: nsrch
            logical :: lbig
            integer :: lp
            logical :: abort1
            logical :: abort2
            logical :: abort3
            common /ma30gd/ eps,rmin
            common /ma30id/ tol,big,ndrop,nsrch,lbig
            common /ma30ed/ lp,abort1,abort2,abort3
        end subroutine ma30bd
        subroutine ma30cd(n,icn,a,licn,lenr,lenrl,lenoff,idisp,ip,iq,x,w,mtype) ! in :mexax:linalg_mexax.f
            integer, optional,check(len(lenr)>=n),depend(lenr) :: n=len(lenr)
            integer dimension(licn) :: icn
            double precision dimension(licn),depend(licn) :: a
            integer, optional,check(len(icn)>=licn),depend(icn) :: licn=len(icn)
            integer dimension(n) :: lenr
            integer dimension(n),depend(n) :: lenrl
            integer dimension(n),depend(n) :: lenoff
            integer dimension(2) :: idisp
            integer dimension(n),depend(n) :: ip
            integer dimension(n),depend(n) :: iq
            double precision dimension(n),depend(n) :: x
            double precision dimension(n),depend(n) :: w
            integer :: mtype
            double precision :: resid
            common /ma30hd/ resid
        end subroutine ma30cd
        subroutine ma30dd(a,icn,iptr,n,iactiv,itop,reals) ! in :mexax:linalg_mexax.f
            double precision dimension(itop) :: a
            integer dimension(itop),depend(itop) :: icn
            integer dimension(n) :: iptr
            integer, optional,check(len(iptr)>=n),depend(iptr) :: n=len(iptr)
            integer :: iactiv
            integer, optional,check(len(a)>=itop),depend(a) :: itop=len(a)
            logical :: reals
            integer :: irncp
            integer :: icncp
            integer :: irank
            integer :: minirn
            integer :: minicn
            common /ma30fd/ irncp,icncp,irank,minirn,minicn
        end subroutine ma30dd
        subroutine mc13d(n,icn,licn,ip,lenr,ior,ib,num,iw) ! in :mexax:linalg_mexax.f
            integer, optional,check(len(ip)>=n),depend(ip) :: n=len(ip)
            integer dimension(licn) :: icn
            integer, optional,check(len(icn)>=licn),depend(icn) :: licn=len(icn)
            integer dimension(n) :: ip
            integer dimension(n),depend(n) :: lenr
            integer dimension(n),depend(n) :: ior
            integer dimension(n),depend(n) :: ib
            integer :: num
            integer dimension(n,3),depend(n) :: iw
        end subroutine mc13d
        subroutine mc13e(n,icn,licn,ip,lenr,arp,ib,num,lowl,numb,prev) ! in :mexax:linalg_mexax.f
            integer, optional,check(len(ip)>=n),depend(ip) :: n=len(ip)
            integer dimension(licn) :: icn
            integer, optional,check(len(icn)>=licn),depend(icn) :: licn=len(icn)
            integer dimension(n) :: ip
            integer dimension(n),depend(n) :: lenr
            integer dimension(n),depend(n) :: arp
            integer dimension(n),depend(n) :: ib
            integer :: num
            integer dimension(n),depend(n) :: lowl
            integer dimension(n),depend(n) :: numb
            integer dimension(n),depend(n) :: prev
        end subroutine mc13e
        subroutine mc20ad(nc,maxa,a,inum,jptr,jnum,jdisp) ! in :mexax:linalg_mexax.f
            integer, optional,check(len(jptr)>=nc),depend(jptr) :: nc=len(jptr)
            integer, optional,check(len(a)>=maxa),depend(a) :: maxa=len(a)
            double precision dimension(maxa) :: a
            integer dimension(maxa),depend(maxa) :: inum
            integer dimension(nc) :: jptr
            integer dimension(maxa),depend(maxa) :: jnum
            integer :: jdisp
        end subroutine mc20ad
        subroutine mc21a(n,icn,licn,ip,lenr,iperm,numnz,iw) ! in :mexax:linalg_mexax.f
            integer, optional,check(len(ip)>=n),depend(ip) :: n=len(ip)
            integer dimension(licn) :: icn
            integer, optional,check(len(icn)>=licn),depend(icn) :: licn=len(icn)
            integer dimension(n) :: ip
            integer dimension(n),depend(n) :: lenr
            integer dimension(n),depend(n) :: iperm
            integer :: numnz
            integer dimension(n,4),depend(n) :: iw
        end subroutine mc21a
        subroutine mc21b(n,icn,licn,ip,lenr,iperm,numnz,pr,arp,cv,out) ! in :mexax:linalg_mexax.f
            integer, optional,check(len(ip)>=n),depend(ip) :: n=len(ip)
            integer dimension(licn) :: icn
            integer, optional,check(len(icn)>=licn),depend(icn) :: licn=len(icn)
            integer dimension(n) :: ip
            integer dimension(n),depend(n) :: lenr
            integer dimension(n),depend(n) :: iperm
            integer :: numnz
            integer dimension(n),depend(n) :: pr
            integer dimension(n),depend(n) :: arp
            integer dimension(n),depend(n) :: cv
            integer dimension(n),depend(n) :: out
        end subroutine mc21b
        subroutine mc22ad(n,icn,a,nz,lenrow,ip,iq,iw,iw1) ! in :mexax:linalg_mexax.f
            integer, optional,check(len(lenrow)>=n),depend(lenrow) :: n=len(lenrow)
            integer dimension(nz) :: icn
            double precision dimension(nz),depend(nz) :: a
            integer, optional,check(len(icn)>=nz),depend(icn) :: nz=len(icn)
            integer dimension(n) :: lenrow
            integer dimension(n),depend(n) :: ip
            integer dimension(n),depend(n) :: iq
            integer dimension(n,2),depend(n) :: iw
            integer dimension(nz),depend(nz) :: iw1
        end subroutine mc22ad
        subroutine mc23ad(n,icn,a,licn,lenr,idisp,ip,iq,lenoff,iw,iw1) ! in :mexax:linalg_mexax.f
            integer, optional,check(len(lenr)>=n),depend(lenr) :: n=len(lenr)
            integer dimension(licn) :: icn
            double precision dimension(licn),depend(licn) :: a
            integer, optional,check(len(icn)>=licn),depend(icn) :: licn=len(icn)
            integer dimension(n) :: lenr
            integer dimension(2) :: idisp
            integer dimension(n),depend(n) :: ip
            integer dimension(n),depend(n) :: iq
            integer dimension(n),depend(n) :: lenoff
            integer dimension(n,5),depend(n) :: iw
            integer dimension(n,2),depend(n) :: iw1
            integer :: lp
            integer :: numnz
            integer :: num
            integer :: large
            logical :: abort
            common /mc23bd/ lp,numnz,num,large,abort
        end subroutine mc23ad
        subroutine mc24ad(n,icn,a,licn,lenr,lenrl,w) ! in :mexax:linalg_mexax.f
            integer, optional,check(len(lenr)>=n),depend(lenr) :: n=len(lenr)
            integer dimension(licn) :: icn
            double precision dimension(licn),depend(licn) :: a
            integer, optional,check(len(icn)>=licn),depend(icn) :: licn=len(icn)
            integer dimension(n) :: lenr
            integer dimension(n),depend(n) :: lenrl
            double precision dimension(n),depend(n) :: w
        end subroutine mc24ad
        block data mabld1 ! in :mexax:linalg_mexax.f
            double precision, optional :: eps=1.0d-4
            double precision :: rmin
            double precision :: resid
            integer :: irncp
            integer :: icncp
            integer :: minirn
            integer :: minicn
            integer :: irank
            logical, optional :: abort1=.true.
            logical, optional :: abort2=.true.
            double precision, optional :: tol=0.0d0
            double precision :: themax
            double precision :: big
            double precision :: dxmax
            double precision :: errmax
            double precision :: dres
            double precision, optional :: cgce=0.5d0
            integer :: ndrop
            integer, optional :: maxit=16
            integer :: noiter
            integer, optional :: nsrch=32768
            integer, optional :: istart=0
            logical, optional :: lbig=.false.
            integer, optional :: lp=6
            integer, optional :: mp=6
            logical, optional :: lblock=.true.
            logical, optional :: grow=.true.
            common /ma28fd/ eps,rmin,resid,irncp,icncp,minirn,minicn,irank,abort1,abort2
            common /ma28hd/ tol,themax,big,dxmax,errmax,dres,cgce,ndrop,maxit,noiter,nsrch,istart,lbig
            common /ma28ed/ lp,mp,lblock,grow
        end block data mabld1
        block data mabld2 ! in :mexax:linalg_mexax.f
            double precision, optional :: eps=1.0d-4
            double precision :: rmin
            double precision, optional :: tol=0.0d0
            double precision, optional :: big=0.0d0
            integer :: ndrop
            integer, optional :: nsrch=32768
            logical, optional :: lbig=.false.
            integer, optional :: lp=6
            logical, optional :: abort1=.true.
            logical, optional :: abort2=.true.
            logical, optional :: abort3=.false.
            common /ma30gd/ eps,rmin
            common /ma30id/ tol,big,ndrop,nsrch,lbig
            common /ma30ed/ lp,abort1,abort2,abort3
        end block data mabld2
        block data mabld3 ! in :mexax:linalg_mexax.f
            integer, optional :: lp=6
            integer :: numnz
            integer :: num
            integer :: large
            logical, optional :: abort=.false.
            common /mc23bd/ lp,numnz,num,large,abort
        end block data mabld3
        subroutine mexx(np,nv,nl,ng,nu,fprob,t,tfin,p,v,u,a,rlam,itol,rtol,atol,h,mxjob,ierr,liwk,iwk,lrwk,rwk,solout,denout,fswit) ! in :mexax:mexax.f
            integer, optional,check(len(p)>=np),depend(p) :: np=len(p)
            integer, optional,check(len(v)>=nv),depend(v) :: nv=len(v)
            integer, optional,check(len(rlam)>=nl),depend(rlam) :: nl=len(rlam)
            integer :: ng
            integer :: nu
            external fprob
            double precision :: t
            double precision :: tfin
            double precision dimension(np) :: p
            double precision dimension(nv) :: v
            double precision dimension(*) :: u
            double precision dimension(nv),depend(nv) :: a
            double precision dimension(nl) :: rlam
            integer :: itol
            double precision dimension(*) :: rtol
            double precision dimension(*) :: atol
            double precision :: h
            integer dimension(150) :: mxjob
            integer :: ierr
            integer, optional,check(len(iwk)>=liwk),depend(iwk) :: liwk=len(iwk)
            integer dimension(liwk) :: iwk
            integer, optional,check(len(rwk)>=lrwk),depend(rwk) :: lrwk=len(rwk)
            double precision dimension(lrwk) :: rwk
            external solout
            external denout
            external fswit
        end subroutine mexx
        subroutine mexx21(np,nv,nl,ng,nu,fprob,solout,denout,t,tfin,p,v,u,a,rlam,npdim,nvdim,nldim,ngdim,nudim,ntodim,n2udim,n6udim,nvldim,lda,ldg,ldf,mda,mdg,mdf,kd,mxjob,h,hmax,rtol,atol,itol,nj,hh,wk,aa,rwopt,iwopt,douts,p1,v1,rl1,a1,u1,tab,wf,wp,wv,wa,wrl,f0,f1,wpdot,pdot0,pdot1,g,gi,wu,wudot,udot0,udot1,wz,scal,fl0,fl1,am,gp,fl,rwkl,iwkl,lrwkl,liwkl,ierr,uround,mout,mdout,ndout,idoflg,ndp,ndv,ndu,nda,ndl,indp,indv,indu,inda,indl,nd,lsafe,kdens,ysafe,dens,yip,nswif,fswit,iswit,iresl,iresr,ires0,ires1,gvalw1,gval0,gval1,gvalw2,gvalw3,gvalw4) ! in :mexax:mexax.f
            use mexx21__user__routines
            integer :: np
            integer :: nv
            integer :: nl
            integer :: ng
            integer :: nu
            external fprob
            external solout
            external denout
            double precision :: t
            double precision :: tfin
            double precision dimension(npdim) :: p
            double precision dimension(nvdim) :: v
            double precision dimension(nudim) :: u
            double precision dimension(nvdim),depend(nvdim) :: a
            double precision dimension(nldim) :: rlam
            integer, optional,check(len(p)>=npdim),depend(p) :: npdim=len(p)
            integer, optional,check(len(v)>=nvdim),depend(v) :: nvdim=len(v)
            integer, optional,check(len(rlam)>=nldim),depend(rlam) :: nldim=len(rlam)
            integer, optional,check(len(g)>=ngdim),depend(g) :: ngdim=len(g)
            integer, optional,check(len(u)>=nudim),depend(u) :: nudim=len(u)
            integer, optional,check(len(rtol)>=ntodim),depend(rtol) :: ntodim=len(rtol)
            integer, optional,check(len(scal)>=n2udim),depend(scal) :: n2udim=len(scal)
            integer, optional,check(shape(tab,0)==n6udim),depend(tab) :: n6udim=shape(tab,0)
            integer, optional,check(len(wz)>=nvldim),depend(wz) :: nvldim=len(wz)
            integer, optional,check(shape(am,0)==lda),depend(am) :: lda=shape(am,0)
            integer, optional,check(shape(gp,0)==ldg),depend(gp) :: ldg=shape(gp,0)
            integer, optional,check(len(fl0)>=ldf),depend(fl0) :: ldf=len(fl0)
            integer, optional,check(shape(am,1)==mda),depend(am) :: mda=shape(am,1)
            integer, optional,check(shape(gp,1)==mdg),depend(gp) :: mdg=shape(gp,1)
            integer, optional,check(shape(fl,1)==mdf),depend(fl) :: mdf=shape(fl,1)
            integer, optional,check(len(nj)>=kd),depend(nj) :: kd=len(nj)
            integer dimension(150) :: mxjob
            double precision :: h
            double precision :: hmax
            double precision dimension(ntodim) :: rtol
            double precision dimension(ntodim),depend(ntodim) :: atol
            integer :: itol
            integer dimension(kd) :: nj
            double precision dimension(kd),depend(kd) :: hh
            double precision dimension(kd),depend(kd) :: wk
            double precision dimension(kd),depend(kd) :: aa
            double precision dimension(50) :: rwopt
            integer dimension(60) :: iwopt
            double precision dimension(ndout) :: douts
            double precision dimension(npdim),depend(npdim) :: p1
            double precision dimension(nvdim),depend(nvdim) :: v1
            double precision dimension(nldim),depend(nldim) :: rl1
            double precision dimension(nvdim),depend(nvdim) :: a1
            double precision dimension(nudim),depend(nudim) :: u1
            double precision dimension(n6udim,kd),depend(kd) :: tab
            double precision dimension(nvdim),depend(nvdim) :: wf
            double precision dimension(npdim),depend(npdim) :: wp
            double precision dimension(nvdim),depend(nvdim) :: wv
            double precision dimension(nvdim),depend(nvdim) :: wa
            double precision dimension(nldim),depend(nldim) :: wrl
            double precision dimension(nvdim),depend(nvdim) :: f0
            double precision dimension(nvdim),depend(nvdim) :: f1
            double precision dimension(npdim),depend(npdim) :: wpdot
            double precision dimension(npdim),depend(npdim) :: pdot0
            double precision dimension(npdim),depend(npdim) :: pdot1
            double precision dimension(ngdim) :: g
            double precision dimension(nldim),depend(nldim) :: gi
            double precision dimension(nudim),depend(nudim) :: wu
            double precision dimension(nudim),depend(nudim) :: wudot
            double precision dimension(nudim),depend(nudim) :: udot0
            double precision dimension(nudim),depend(nudim) :: udot1
            double precision dimension(nvldim) :: wz
            double precision dimension(n2udim) :: scal
            double precision dimension(ldf) :: fl0
            double precision dimension(ldf),depend(ldf) :: fl1
            double precision dimension(lda,mda) :: am
            double precision dimension(ldg,mdg) :: gp
            double precision dimension(ldf,mdf),depend(ldf) :: fl
            double precision dimension(lrwkl) :: rwkl
            integer dimension(liwkl) :: iwkl
            integer, optional,check(len(rwkl)>=lrwkl),depend(rwkl) :: lrwkl=len(rwkl)
            integer, optional,check(len(iwkl)>=liwkl),depend(iwkl) :: liwkl=len(iwkl)
            integer :: ierr
            double precision :: uround
            integer :: mout
            integer :: mdout
            integer, optional,check(len(douts)>=ndout),depend(douts) :: ndout=len(douts)
            integer :: idoflg
            integer, optional,check(len(indp)>=ndp),depend(indp) :: ndp=len(indp)
            integer, optional,check(len(indv)>=ndv),depend(indv) :: ndv=len(indv)
            integer, optional,check(len(indu)>=ndu),depend(indu) :: ndu=len(indu)
            integer, optional,check(len(inda)>=nda),depend(inda) :: nda=len(inda)
            integer, optional,check(len(indl)>=ndl),depend(indl) :: ndl=len(indl)
            integer dimension(ndp) :: indp
            integer dimension(ndv) :: indv
            integer dimension(ndu) :: indu
            integer dimension(nda) :: inda
            integer dimension(ndl) :: indl
            integer, optional,check(shape(ysafe,0)==nd),depend(ysafe) :: nd=shape(ysafe,0)
            integer, optional,check(shape(ysafe,1)==lsafe),depend(ysafe) :: lsafe=shape(ysafe,1)
            integer, optional,check(shape(dens,1)==kdens),depend(dens) :: kdens=shape(dens,1)
            double precision dimension(nd,lsafe) :: ysafe
            double precision dimension(nd,kdens),depend(nd) :: dens
            double precision dimension(nd),depend(nd) :: yip
            integer, optional,check(len(iswit)>=nswif),depend(iswit) :: nswif=len(iswit)
            external fswit
            integer dimension(nswif) :: iswit
            integer dimension(nswif),depend(nswif) :: iresl
            integer dimension(nswif),depend(nswif) :: iresr
            integer dimension(nswif),depend(nswif) :: ires0
            integer dimension(nswif),depend(nswif) :: ires1
            double precision dimension(nswif),depend(nswif) :: gvalw1
            double precision dimension(nswif),depend(nswif) :: gval0
            double precision dimension(nswif),depend(nswif) :: gval1
            double precision dimension(nswif),depend(nswif) :: gvalw2
            double precision dimension(nswif),depend(nswif) :: gvalw3
            double precision dimension(nswif),depend(nswif) :: gvalw4
            double precision :: told4
            double precision :: urd
            double precision :: fac
            double precision :: fac1
            double precision :: fac2
            double precision :: safe2
            double precision :: safe3
            double precision :: hmaxim
            double precision :: errold
            logical :: qrject
            logical :: qfail
            logical :: qinit
            common /errcom/ told4,urd,fac,fac1,fac2,safe2,safe3,hmaxim,errold
            common /logcom/ qrject,qfail,qinit
        end subroutine mexx21
        subroutine mxprjc(np,nv,nl,ng,nu,npdim,nvdim,nldim,ngdim,nudim,ntodim,n2udim,n6udim,nvldim,lda,ldg,ldf,mda,mdg,mdf,fprob,t,p,v,u,a,rlam,scal,rtol,atol,itol,itmax,niter,epsreq,epsest,f,pp,vv,x,g,gi,pdot,udot,am,gp,fl,mxjob,rwkl,iwkl,lrwkl,liwkl,ifail) ! in :mexax:mexax.f
            integer :: np
            integer :: nv
            integer :: nl
            integer :: ng
            integer :: nu
            integer, optional,check(len(p)>=npdim),depend(p) :: npdim=len(p)
            integer, optional,check(len(v)>=nvdim),depend(v) :: nvdim=len(v)
            integer, optional,check(len(rlam)>=nldim),depend(rlam) :: nldim=len(rlam)
            integer, optional,check(len(g)>=ngdim),depend(g) :: ngdim=len(g)
            integer, optional,check(len(u)>=nudim),depend(u) :: nudim=len(u)
            integer, optional,check(len(rtol)>=ntodim),depend(rtol) :: ntodim=len(rtol)
            integer, optional,check(len(scal)>=n2udim),depend(scal) :: n2udim=len(scal)
            integer :: n6udim
            integer, optional,check(len(x)>=nvldim),depend(x) :: nvldim=len(x)
            integer, optional,check(shape(am,0)==lda),depend(am) :: lda=shape(am,0)
            integer, optional,check(shape(gp,0)==ldg),depend(gp) :: ldg=shape(gp,0)
            integer, optional,check(shape(fl,0)==ldf),depend(fl) :: ldf=shape(fl,0)
            integer, optional,check(shape(am,1)==mda),depend(am) :: mda=shape(am,1)
            integer, optional,check(shape(gp,1)==mdg),depend(gp) :: mdg=shape(gp,1)
            integer, optional,check(shape(fl,1)==mdf),depend(fl) :: mdf=shape(fl,1)
            external fprob
            double precision :: t
            double precision dimension(npdim) :: p
            double precision dimension(nvdim) :: v
            double precision dimension(nudim) :: u
            double precision dimension(nvdim),depend(nvdim) :: a
            double precision dimension(nldim) :: rlam
            double precision dimension(n2udim) :: scal
            double precision dimension(ntodim) :: rtol
            double precision dimension(ntodim),depend(ntodim) :: atol
            integer :: itol
            integer :: itmax
            integer :: niter
            double precision :: epsreq
            double precision :: epsest
            double precision dimension(nvdim),depend(nvdim) :: f
            double precision dimension(npdim),depend(npdim) :: pp
            double precision dimension(nvdim),depend(nvdim) :: vv
            double precision dimension(nvldim) :: x
            double precision dimension(ngdim) :: g
            double precision dimension(nldim),depend(nldim) :: gi
            double precision dimension(npdim),depend(npdim) :: pdot
            double precision dimension(nudim),depend(nudim) :: udot
            double precision dimension(lda,mda) :: am
            double precision dimension(ldg,mdg) :: gp
            double precision dimension(ldf,mdf) :: fl
            integer dimension(150) :: mxjob
            double precision dimension(lrwkl) :: rwkl
            integer dimension(liwkl) :: iwkl
            integer, optional,check(len(rwkl)>=lrwkl),depend(rwkl) :: lrwkl=len(rwkl)
            integer, optional,check(len(iwkl)>=liwkl),depend(iwkl) :: liwkl=len(iwkl)
            integer :: ifail
        end subroutine mxprjc
        subroutine mxprob(np,nv,nl,ng,nu,t,p,v,u,rlam,npdim,nvdim,nldim,ngdim,nudim,ntodim,n2udim,n6udim,nvldim,lda,ldg,ldf,mda,mdg,mdf,am,gp,fl,f,pdot,udot,g,gi,qflag,fprob1,fprob2,fprob3,mxjob,liwkl,iwkl,ifail) ! in :mexax:mexax.f
            use mxprob__user__routines
            integer :: np
            integer :: nv
            integer :: nl
            integer :: ng
            integer :: nu
            double precision :: t
            double precision dimension(npdim) :: p
            double precision dimension(nvdim) :: v
            double precision dimension(nudim) :: u
            double precision dimension(nldim) :: rlam
            integer, optional,check(len(p)>=npdim),depend(p) :: npdim=len(p)
            integer, optional,check(len(v)>=nvdim),depend(v) :: nvdim=len(v)
            integer, optional,check(len(rlam)>=nldim),depend(rlam) :: nldim=len(rlam)
            integer, optional,check(len(g)>=ngdim),depend(g) :: ngdim=len(g)
            integer, optional,check(len(u)>=nudim),depend(u) :: nudim=len(u)
            integer :: ntodim
            integer :: n2udim
            integer :: n6udim
            integer :: nvldim
            integer, optional,check(shape(am,0)==lda),depend(am) :: lda=shape(am,0)
            integer, optional,check(shape(gp,0)==ldg),depend(gp) :: ldg=shape(gp,0)
            integer, optional,check(shape(fl,0)==ldf),depend(fl) :: ldf=shape(fl,0)
            integer, optional,check(shape(am,1)==mda),depend(am) :: mda=shape(am,1)
            integer, optional,check(shape(gp,1)==mdg),depend(gp) :: mdg=shape(gp,1)
            integer, optional,check(shape(fl,1)==mdf),depend(fl) :: mdf=shape(fl,1)
            double precision dimension(lda,mda) :: am
            double precision dimension(ldg,mdg) :: gp
            double precision dimension(ldf,mdf) :: fl
            double precision dimension(nvdim),depend(nvdim) :: f
            double precision dimension(npdim),depend(npdim) :: pdot
            double precision dimension(nudim),depend(nudim) :: udot
            double precision dimension(ngdim) :: g
            double precision dimension(nldim),depend(nldim) :: gi
            logical dimension(9) :: qflag
            external fprob1
            external fprob2
            external fprob3
            integer dimension(150) :: mxjob
            integer, optional,check(len(iwkl)>=liwkl),depend(iwkl) :: liwkl=len(iwkl)
            integer dimension(liwkl) :: iwkl
            integer :: ifail
        end subroutine mxprob
        subroutine mexxex(j,np,nv,nl,ng,nu,fprob,t0,p0,v0,u0,rl0,scal,h,npdim,nvdim,nldim,ngdim,nudim,ntodim,n2udim,n6udim,nvldim,lda,ldg,ldf,mda,mdg,mdf,nj,tab,kd,itol,rtol,atol,err,hh,wk,aa,f,p,v,a,rlam,f0,pdot,pdot0,g,gi,u,udot,udot0,z,fl0,fl1,am,gp,fl,mxjob,ifail,liwkl,iwkl,lrwkl,rwkl,idoflg,nd,ndp,ndv,ndu,nda,ndl,indp,indv,indu,inda,indl,lsafe,isafe,ysafe) ! in :mexax:mexax.f
            integer :: j
            integer :: np
            integer :: nv
            integer :: nl
            integer :: ng
            integer :: nu
            external fprob
            double precision :: t0
            double precision dimension(npdim) :: p0
            double precision dimension(nvdim) :: v0
            double precision dimension(nudim) :: u0
            double precision dimension(nldim) :: rl0
            double precision dimension(n2udim) :: scal
            double precision :: h
            integer, optional,check(len(p0)>=npdim),depend(p0) :: npdim=len(p0)
            integer, optional,check(len(v0)>=nvdim),depend(v0) :: nvdim=len(v0)
            integer, optional,check(len(rl0)>=nldim),depend(rl0) :: nldim=len(rl0)
            integer, optional,check(len(g)>=ngdim),depend(g) :: ngdim=len(g)
            integer, optional,check(len(u0)>=nudim),depend(u0) :: nudim=len(u0)
            integer, optional,check(len(rtol)>=ntodim),depend(rtol) :: ntodim=len(rtol)
            integer, optional,check(len(scal)>=n2udim),depend(scal) :: n2udim=len(scal)
            integer, optional,check(shape(tab,0)==n6udim),depend(tab) :: n6udim=shape(tab,0)
            integer, optional,check(len(z)>=nvldim),depend(z) :: nvldim=len(z)
            integer, optional,check(shape(am,0)==lda),depend(am) :: lda=shape(am,0)
            integer, optional,check(shape(gp,0)==ldg),depend(gp) :: ldg=shape(gp,0)
            integer, optional,check(len(fl0)>=ldf),depend(fl0) :: ldf=len(fl0)
            integer, optional,check(shape(am,1)==mda),depend(am) :: mda=shape(am,1)
            integer, optional,check(shape(gp,1)==mdg),depend(gp) :: mdg=shape(gp,1)
            integer, optional,check(shape(fl,1)==mdf),depend(fl) :: mdf=shape(fl,1)
            integer dimension(kd) :: nj
            double precision dimension(n6udim,kd),depend(kd) :: tab
            integer, optional,check(len(nj)>=kd),depend(nj) :: kd=len(nj)
            integer :: itol
            double precision dimension(ntodim) :: rtol
            double precision dimension(ntodim),depend(ntodim) :: atol
            double precision :: err
            double precision dimension(kd),depend(kd) :: hh
            double precision dimension(kd),depend(kd) :: wk
            double precision dimension(kd),depend(kd) :: aa
            double precision dimension(nvdim),depend(nvdim) :: f
            double precision dimension(npdim),depend(npdim) :: p
            double precision dimension(nvdim),depend(nvdim) :: v
            double precision dimension(nvdim),depend(nvdim) :: a
            double precision dimension(nldim),depend(nldim) :: rlam
            double precision dimension(nvdim),depend(nvdim) :: f0
            double precision dimension(npdim),depend(npdim) :: pdot
            double precision dimension(npdim),depend(npdim) :: pdot0
            double precision dimension(ngdim) :: g
            double precision dimension(nldim),depend(nldim) :: gi
            double precision dimension(nudim),depend(nudim) :: u
            double precision dimension(nudim),depend(nudim) :: udot
            double precision dimension(nudim),depend(nudim) :: udot0
            double precision dimension(nvldim) :: z
            double precision dimension(ldf) :: fl0
            double precision dimension(ldf),depend(ldf) :: fl1
            double precision dimension(lda,mda) :: am
            double precision dimension(ldg,mdg) :: gp
            double precision dimension(ldf,mdf),depend(ldf) :: fl
            integer dimension(150) :: mxjob
            integer :: ifail
            integer, optional,check(len(iwkl)>=liwkl),depend(iwkl) :: liwkl=len(iwkl)
            integer dimension(liwkl) :: iwkl
            integer, optional,check(len(rwkl)>=lrwkl),depend(rwkl) :: lrwkl=len(rwkl)
            double precision dimension(lrwkl) :: rwkl
            integer :: idoflg
            integer, optional,check(shape(ysafe,0)==nd),depend(ysafe) :: nd=shape(ysafe,0)
            integer, optional,check(len(indp)>=ndp),depend(indp) :: ndp=len(indp)
            integer, optional,check(len(indv)>=ndv),depend(indv) :: ndv=len(indv)
            integer, optional,check(len(indu)>=ndu),depend(indu) :: ndu=len(indu)
            integer, optional,check(len(inda)>=nda),depend(inda) :: nda=len(inda)
            integer, optional,check(len(indl)>=ndl),depend(indl) :: ndl=len(indl)
            integer dimension(ndp) :: indp
            integer dimension(ndv) :: indv
            integer dimension(ndu) :: indu
            integer dimension(nda) :: inda
            integer dimension(ndl) :: indl
            integer, optional,check(shape(ysafe,1)==lsafe),depend(ysafe) :: lsafe=shape(ysafe,1)
            integer :: isafe
            double precision dimension(nd,lsafe) :: ysafe
            double precision :: told4
            double precision :: uround
            double precision :: fac
            double precision :: fac1
            double precision :: fac2
            double precision :: safe2
            double precision :: safe3
            double precision :: hmax
            double precision :: errold
            logical :: qrject
            logical :: qfail
            logical :: qinit
            common /errcom/ told4,uround,fac,fac1,fac2,safe2,safe3,hmax,errold
            common /logcom/ qrject,qfail,qinit
        end subroutine mexxex
        subroutine mxddu1(info,nd,ndp,ndv,ndu,nda,ndl,kdens,ilam,irho,t,told,h,dens,yip,t0,tfin,douts,ndummy,ndph,ndvh,nduh,ndah,ndlh,indp,indv,indu,inda,indl,irtrn) ! in :mexax:mexax.f
            integer dimension(50) :: info
            integer, optional,check(shape(dens,0)==nd),depend(dens) :: nd=shape(dens,0)
            integer :: ndp
            integer :: ndv
            integer :: ndu
            integer :: nda
            integer :: ndl
            integer, optional,check(shape(dens,1)==kdens),depend(dens) :: kdens=shape(dens,1)
            integer :: ilam
            integer :: irho
            double precision :: t
            double precision :: told
            double precision :: h
            double precision dimension(nd,kdens) :: dens
            double precision dimension(nd),depend(nd) :: yip
            double precision :: t0
            double precision :: tfin
            double precision dimension(*) :: douts
            integer :: ndummy
            integer :: ndph
            integer :: ndvh
            integer :: nduh
            integer :: ndah
            integer :: ndlh
            integer dimension(*) :: indp
            integer dimension(*) :: indv
            integer dimension(*) :: indu
            integer dimension(*) :: inda
            integer dimension(*) :: indl
            integer :: irtrn
        end subroutine mxddu1
        subroutine mxdout(info,nd,ndp,ndv,ndu,nda,ndl,kdens,ilam,irho,t,told,h,dens,yip,t0,tfin,douts,denout,ndh,ndph,ndvh,nduh,ndah,ndlh,indp,indv,indu,inda,indl,qprtim,irtrn) ! in :mexax:mexax.f
            use mxdout__user__routines
            integer dimension(50) :: info
            integer, optional,check(shape(dens,0)==nd),depend(dens) :: nd=shape(dens,0)
            integer :: ndp
            integer :: ndv
            integer :: ndu
            integer :: nda
            integer :: ndl
            integer, optional,check(shape(dens,1)==kdens),depend(dens) :: kdens=shape(dens,1)
            integer :: ilam
            integer :: irho
            double precision :: t
            double precision :: told
            double precision :: h
            double precision dimension(nd,kdens) :: dens
            double precision dimension(nd + 1),depend(nd) :: yip
            double precision :: t0
            double precision :: tfin
            double precision dimension(*) :: douts
            external denout
            integer :: ndh
            integer :: ndph
            integer :: ndvh
            integer :: nduh
            integer :: ndah
            integer :: ndlh
            integer dimension(*) :: indp
            integer dimension(*) :: indv
            integer dimension(*) :: indu
            integer dimension(*) :: inda
            integer dimension(*) :: indl
            logical :: qprtim
            integer :: irtrn
        end subroutine mxdout
        subroutine mxlin(n,m,lda,mxjob,ierr) ! in :mexax:mexax.f
            integer :: n
            integer :: m
            integer :: lda
            integer dimension(150) :: mxjob
            integer :: ierr
            double precision :: epsma
            double precision :: rmin
            double precision :: resid
            integer :: irncp
            integer :: icncp
            integer :: minirn
            integer :: minicn
            integer :: irank
            logical :: qabrt1
            logical :: qabrt2
            integer :: lp
            integer :: mp
            logical :: qblock
            logical :: qgrow
            integer dimension(2) :: idisp
            integer :: ldf
            double precision dimension(ldgp,*) :: gp
            double precision dimension(ldam,*) :: am
            integer :: ldgp
            integer :: ldam
            integer :: iupdte
            integer :: mdf
            double precision dimension(n) :: v
            integer dimension(*) :: iwk
            double precision dimension(ldf,*) :: fl
            double precision dimension(lda,*) :: a
            double precision dimension(n+m) :: b
            integer :: ifdec
            double precision dimension(m) :: w
            double precision dimension(n) :: z
            common /ma28fd/ epsma,rmin,resid,irncp,icncp,minirn,minicn,irank,qabrt1,qabrt2
            common /ma28ed/ lp,mp,qblock,qgrow
            common /ma28gd/ idisp
            entry mmultf(n,m,ldf,mdf,fl,v,w,mxjob)
            entry asol(n,m,b,mxjob,lda,a,iwk)
            entry mmult(n,m,ldam,am,v,z,mxjob)
            entry adec(n,m,ldam,ldgp,ldf,am,gp,fl,mxjob,lda,a,iwk,ifdec,iupdte)
        end subroutine mxlin
        subroutine madiag(isub,iflag,qprint,lunit) ! in :mexax:mexax.f
            integer :: isub
            integer :: iflag
            logical :: qprint
            integer :: lunit
            double precision :: eps
            double precision :: rmin
            double precision :: resid
            integer :: irncp
            integer :: icncp
            integer :: minirn
            integer :: minicn
            integer :: irank
            logical :: qabrt1
            logical :: qabrt2
            common /ma28fd/ eps,rmin,resid,irncp,icncp,minirn,minicn,irank,qabrt1,qabrt2
        end subroutine madiag
        subroutine mcopy(nmrc,nblk,ldam,nzg,nza,am,g,irowg,jcolg,amat,irow,jcol) ! in :mexax:mexax.f
            logical :: nmrc
            integer :: nblk
            logical, optional,check(shape(am,0)==ldam),depend(am) :: ldam=shape(am,0)
            integer, optional,check(len(g)>=nzg),depend(g) :: nzg=len(g)
            integer, optional,check(len(amat)>=nza),depend(amat) :: nza=len(amat)
            double precision dimension(ldam,*) :: am
            double precision dimension(nzg) :: g
            integer dimension(nzg),depend(nzg) :: irowg
            integer dimension(nzg),depend(nzg) :: jcolg
            double precision dimension(nza) :: amat
            integer dimension(nza),depend(nza) :: irow
            integer dimension(nza),depend(nza) :: jcol
        end subroutine mcopy
        subroutine recdec(nb,n,ldam,mdam,ldgp,mdgp,lda,mda,am,gp,a,nz,nf,ipt,ierr) ! in :mexax:mexax.f
            logical, optional,check(len(nz)>=nb),depend(nz) :: nb=len(nz)
            logical :: n
            logical, optional,check(shape(am,0)==ldam),depend(am) :: ldam=shape(am,0)
            logical, optional,check(shape(am,1)==mdam),depend(am) :: mdam=shape(am,1)
            logical, optional,check(shape(gp,0)==ldgp),depend(gp) :: ldgp=shape(gp,0)
            logical, optional,check(shape(gp,1)==mdgp),depend(gp) :: mdgp=shape(gp,1)
            logical, optional,check(shape(a,0)==lda),depend(a) :: lda=shape(a,0)
            logical, optional,check(shape(a,1)==mda),depend(a) :: mda=shape(a,1)
            double precision dimension(ldam,mdam) :: am
            double precision dimension(ldgp,mdgp) :: gp
            double precision dimension(lda,mda) :: a
            integer dimension(nb) :: nz
            integer dimension(nb),depend(nb) :: nf
            integer dimension(nb + 1),depend(nb) :: ipt
            logical :: ierr
        end subroutine recdec
        subroutine recsol(nb,n,lda,mda,a,b,nz,nf,ipt,ierr) ! in :mexax:mexax.f
            logical, optional,check(len(nz)>=nb),depend(nz) :: nb=len(nz)
            logical :: n
            logical, optional,check(shape(a,0)==lda),depend(a) :: lda=shape(a,0)
            logical, optional,check(shape(a,1)==mda),depend(a) :: mda=shape(a,1)
            double precision dimension(lda,mda) :: a
            double precision dimension(lda),depend(lda) :: b
            integer dimension(nb) :: nz
            integer dimension(nb),depend(nb) :: nf
            integer dimension(nb + 1),depend(nb) :: ipt
            logical :: ierr
        end subroutine recsol
        subroutine mxdens(np,nv,nu,nl,t,p0,v0,u0,a0,r0,pdot0,vdot0,udot0,pdot1,vdot1,udot1,h,kc,kdomax,kexmax,tab,nj,p1,v1,u1,a1,r1,ilam,irho,idoflg,n6udim,lsafe,ldens,ldys,nd,ndp,ndv,ndu,nda,ndr,itol,ntodim,rtol,atol,n2udim,scal,ywrk,indp,indv,indu,inda,indr,ysafe,dens,mxjob,idocnt) ! in :mexax:mexax.f
            integer, optional,check(len(p0)>=np),depend(p0) :: np=len(p0)
            integer, optional,check(len(v0)>=nv),depend(v0) :: nv=len(v0)
            integer, optional,check(len(u0)>=nu),depend(u0) :: nu=len(u0)
            integer, optional,check(len(r0)>=nl),depend(r0) :: nl=len(r0)
            double precision :: t
            double precision dimension(np) :: p0
            double precision dimension(nv) :: v0
            double precision dimension(nu) :: u0
            double precision dimension(nv),depend(nv) :: a0
            double precision dimension(nl) :: r0
            double precision dimension(np),depend(np) :: pdot0
            double precision dimension(nv),depend(nv) :: vdot0
            double precision dimension(nu),depend(nu) :: udot0
            double precision dimension(np),depend(np) :: pdot1
            double precision dimension(nv),depend(nv) :: vdot1
            double precision dimension(nu),depend(nu) :: udot1
            double precision :: h
            integer :: kc
            integer, optional,check(shape(tab,1)==kdomax),depend(tab) :: kdomax=shape(tab,1)
            integer, optional,check(len(nj)>=kexmax),depend(nj) :: kexmax=len(nj)
            double precision dimension(n6udim,kdomax) :: tab
            integer dimension(kexmax) :: nj
            double precision dimension(np),depend(np) :: p1
            double precision dimension(nv),depend(nv) :: v1
            double precision dimension(nu),depend(nu) :: u1
            double precision dimension(nv),depend(nv) :: a1
            double precision dimension(nl),depend(nl) :: r1
            integer :: ilam
            integer :: irho
            integer :: idoflg
            integer, optional,check(shape(tab,0)==n6udim),depend(tab) :: n6udim=shape(tab,0)
            integer, optional,check(shape(ysafe,1)==lsafe),depend(ysafe) :: lsafe=shape(ysafe,1)
            integer, optional,check(shape(dens,1)==ldens),depend(dens) :: ldens=shape(dens,1)
            logical, optional,check(shape(ysafe,0)==ldys),depend(ysafe) :: ldys=shape(ysafe,0)
            integer, optional,check(len(ywrk)>=nd),depend(ywrk) :: nd=len(ywrk)
            integer, optional,check(len(indp)>=ndp),depend(indp) :: ndp=len(indp)
            integer, optional,check(len(indv)>=ndv),depend(indv) :: ndv=len(indv)
            integer, optional,check(len(indu)>=ndu),depend(indu) :: ndu=len(indu)
            integer, optional,check(len(inda)>=nda),depend(inda) :: nda=len(inda)
            integer, optional,check(len(indr)>=ndr),depend(indr) :: ndr=len(indr)
            integer :: itol
            integer, optional,check(len(rtol)>=ntodim),depend(rtol) :: ntodim=len(rtol)
            double precision dimension(ntodim) :: rtol
            double precision dimension(ntodim),depend(ntodim) :: atol
            integer, optional,check(len(scal)>=n2udim),depend(scal) :: n2udim=len(scal)
            double precision dimension(n2udim) :: scal
            double precision dimension(nd) :: ywrk
            integer dimension(ndp) :: indp
            integer dimension(ndv) :: indv
            integer dimension(ndu) :: indu
            integer dimension(nda) :: inda
            integer dimension(ndr) :: indr
            double precision dimension(ldys,lsafe) :: ysafe
            double precision dimension(nd,ldens),depend(nd) :: dens
            logical dimension(150) :: mxjob
            integer :: idocnt
        end subroutine mxdens
        subroutine mxdre1(filnam,info,nd,ndp,ndv,ndu,nda,ndl,kdens,ilam,irho,t,told,h,dens,yip,t0,tfin,douts,icall,indp,indv,indu,inda,indl,irtrn) ! in :mexax:mexax.f
            character*(*) :: filnam
            integer dimension(50) :: info
            integer :: nd
            integer :: ndp
            integer :: ndv
            integer :: ndu
            integer :: nda
            integer :: ndl
            integer :: kdens
            integer :: ilam
            integer :: irho
            double precision :: t
            double precision :: told
            double precision :: h
            double precision dimension(*) :: dens
            double precision dimension(*) :: yip
            double precision :: t0
            double precision :: tfin
            double precision dimension(*) :: douts
            logical :: icall
            integer dimension(*) :: indp
            integer dimension(*) :: indv
            integer dimension(*) :: indu
            integer dimension(*) :: inda
            integer dimension(*) :: indl
            logical :: irtrn
        end subroutine mxdre1
        subroutine mxherm(ndcl,y,n,ilam,irho) ! in :mexax:mexax.f
            integer, optional,check(shape(y,0)==ndcl),depend(y) :: ndcl=shape(y,0)
            double precision dimension(ndcl,*) :: y
            integer :: n
            logical :: ilam
            logical :: irho
        end subroutine mxherm
        subroutine mxipol(ndcl,dens,n,t,told,h,ilam,irho,contex) ! in :mexax:mexax.f
            integer, optional,check(shape(dens,0)==ndcl),depend(dens) :: ndcl=shape(dens,0)
            double precision dimension(ndcl,*) :: dens
            integer, optional,check(len(contex)>=n),depend(contex) :: n=len(contex)
            double precision :: t
            double precision :: told
            double precision :: h
            integer :: ilam
            integer :: irho
            double precision dimension(n) :: contex
        end subroutine mxipol
        subroutine mxrtsc(istep,ictype,np,nv,nl,nu,nswif,npdim,nvdim,nldim,nudim,t,p,v,u,a,rlam,gval0,gval1,ires0,ires1,nsc,nsub,gswit,mnswi,luswi,irtrn) ! in :mexax:mexax.f
            use mxrtsc__user__routines
            logical :: istep
            logical :: ictype
            logical :: np
            logical :: nv
            logical :: nl
            logical :: nu
            logical :: nswif
            logical, optional,check(len(p)>=npdim),depend(p) :: npdim=len(p)
            logical, optional,check(len(v)>=nvdim),depend(v) :: nvdim=len(v)
            logical, optional,check(len(rlam)>=nldim),depend(rlam) :: nldim=len(rlam)
            logical, optional,check(len(u)>=nudim),depend(u) :: nudim=len(u)
            double precision :: t
            double precision dimension(npdim) :: p
            double precision dimension(nvdim) :: v
            double precision dimension(nudim) :: u
            double precision dimension(nvdim),depend(nvdim) :: a
            double precision dimension(nldim) :: rlam
            double precision dimension(*) :: gval0
            double precision dimension(*) :: gval1
            integer dimension(*) :: ires0
            integer dimension(*) :: ires1
            logical :: nsc
            logical :: nsub
            external gswit
            logical :: mnswi
            logical :: luswi
            logical :: irtrn
        end subroutine mxrtsc
        subroutine mxrtfd(istep,nd,ndp,ndv,ndu,nda,ndr,kdens,ilam,irho,t,told,h,dens,yip,nswif,nsub,gvanew,gval0,gval1,gvall,gvalr,gvalh,ires0,ires1,iresl,iresr,tol,tzero,izero,gswit,nsc,irtrn,np,nv,nl,ng,nu,npdim,nvdim,nldim,ngdim,nudim,ntodim,n2udim,n6udim,nvldim,lda,ldg,ldf,mda,mdg,mdf,fprob,p,v,u,a,rlam,scal,rtol,atol,itol,itmaxp,niter,epsreq,epsest,wf,wp,wv,wz,wg,wgi,wpdot,wudot,am,gp,fl,mxjob,rwk,iwk,lrwk,liwk,ifail) ! in :mexax:mexax.f
            use mxrtfd__user__routines
            logical :: istep
            integer, optional,check(shape(dens,0)==nd),depend(dens) :: nd=shape(dens,0)
            integer :: ndp
            integer :: ndv
            integer :: ndu
            integer :: nda
            integer :: ndr
            integer, optional,check(shape(dens,1)==kdens),depend(dens) :: kdens=shape(dens,1)
            integer :: ilam
            integer :: irho
            double precision :: t
            double precision :: told
            double precision :: h
            double precision dimension(nd,kdens) :: dens
            double precision dimension(nd),depend(nd) :: yip
            logical :: nswif
            logical :: nsub
            double precision dimension(*) :: gvanew
            double precision dimension(*) :: gval0
            double precision dimension(*) :: gval1
            double precision dimension(*) :: gvall
            double precision dimension(*) :: gvalr
            double precision dimension(*) :: gvalh
            logical dimension(*) :: ires0
            logical dimension(*) :: ires1
            logical dimension(*) :: iresl
            logical dimension(*) :: iresr
            double precision :: tol
            double precision :: tzero
            logical dimension(*) :: izero
            external gswit
            logical :: nsc
            integer :: irtrn
            integer :: np
            integer :: nv
            integer :: nl
            integer :: ng
            integer :: nu
            integer, optional,check(len(p)>=npdim),depend(p) :: npdim=len(p)
            integer, optional,check(len(v)>=nvdim),depend(v) :: nvdim=len(v)
            integer, optional,check(len(rlam)>=nldim),depend(rlam) :: nldim=len(rlam)
            integer, optional,check(len(wg)>=ngdim),depend(wg) :: ngdim=len(wg)
            integer, optional,check(len(u)>=nudim),depend(u) :: nudim=len(u)
            integer, optional,check(len(rtol)>=ntodim),depend(rtol) :: ntodim=len(rtol)
            integer, optional,check(len(scal)>=n2udim),depend(scal) :: n2udim=len(scal)
            integer :: n6udim
            integer, optional,check(len(wz)>=nvldim),depend(wz) :: nvldim=len(wz)
            integer, optional,check(shape(am,0)==lda),depend(am) :: lda=shape(am,0)
            integer, optional,check(shape(gp,0)==ldg),depend(gp) :: ldg=shape(gp,0)
            integer, optional,check(shape(fl,0)==ldf),depend(fl) :: ldf=shape(fl,0)
            integer, optional,check(shape(am,1)==mda),depend(am) :: mda=shape(am,1)
            integer, optional,check(shape(gp,1)==mdg),depend(gp) :: mdg=shape(gp,1)
            integer, optional,check(shape(fl,1)==mdf),depend(fl) :: mdf=shape(fl,1)
            external fprob
            double precision dimension(npdim) :: p
            double precision dimension(nvdim) :: v
            double precision dimension(nudim) :: u
            double precision dimension(nvdim),depend(nvdim) :: a
            double precision dimension(nldim) :: rlam
            double precision dimension(n2udim) :: scal
            double precision dimension(ntodim) :: rtol
            double precision dimension(ntodim),depend(ntodim) :: atol
            integer :: itol
            integer :: itmaxp
            integer :: niter
            double precision :: epsreq
            double precision :: epsest
            double precision dimension(nvdim),depend(nvdim) :: wf
            double precision dimension(npdim),depend(npdim) :: wp
            double precision dimension(nvdim),depend(nvdim) :: wv
            double precision dimension(nvldim) :: wz
            double precision dimension(ngdim) :: wg
            double precision dimension(nldim),depend(nldim) :: wgi
            double precision dimension(npdim),depend(npdim) :: wpdot
            double precision dimension(nudim),depend(nudim) :: wudot
            double precision dimension(lda,mda) :: am
            double precision dimension(ldg,mdg) :: gp
            double precision dimension(ldf,mdf) :: fl
            integer dimension(150) :: mxjob
            double precision dimension(lrwk) :: rwk
            integer dimension(liwk) :: iwk
            integer, optional,check(len(rwk)>=lrwk),depend(rwk) :: lrwk=len(rwk)
            integer, optional,check(len(iwk)>=liwk),depend(iwk) :: liwk=len(iwk)
            integer :: ifail
        end subroutine mxrtfd
        subroutine zibconst(epmach,small) ! in :mexax:zibconst.f
            double precision :: epmach
            double precision :: small
        end subroutine zibconst
        subroutine mon ! in :mexax:zibmon.f
            character*(*) :: texth
            character*(*) :: nameh
            logical :: iounit
            logical :: indx
            double precision dimension(26) :: aver
            logical :: iret
            entry monstr(iret)
            entry monini(texth,iounit)
            entry monoff(indx)
            entry monhlt()
            entry mondef(indx,nameh)
            entry monget(aver)
            entry monon(indx)
            entry monprt()
        end subroutine mon
        subroutine zibsec(cptim,ifail) ! in :mexax:zibsec.f
            real :: cptim
            integer :: ifail
        end subroutine zibsec
    end interface 
end python module mexax

! This file was auto-generated with f2py (version:2).
! See http://cens.ioc.ee/projects/f2py2e/
